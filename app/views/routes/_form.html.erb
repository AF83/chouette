<%= semantic_form_for [@referential, @line, @route] do |form| %>
  <%= form.inputs do %>
    <%= form.input :name %>
    <%= form.input :published_name %>
    <%= form.input :number %>
    <%= form.input :comment %>
    <%= form.input :opposite_route, :as => :select, :collection => @line.routes.select { |r| r.id != @route.id } %>
    <%= form.input :direction_code, :as => :select, :collection => Chouette::Route.directions, :include_blank => false, :member_label => Proc.new { |mode| t("directions.label.#{mode}") } %>
    <%= form.input :wayback_code, :as => :select, :collection => Chouette::Route.waybacks, :include_blank => false, :member_label => Proc.new { |mode| t("waybacks.label.#{mode}") } %>
    <%= form.input :objectid, :required => !@route.new_record?, :input_html => { :disabled => !@route.new_record? } %>
  <% end %>
  <div class="stop_points content" >
	  <div id="stop_points">
		  <%= form.semantic_fields_for :stop_points do |p| %>
		     <%= render "stop_point_fields",  :f => p %>
		  <% end %>
	  </div>
	  <%= link_to_add_association t("routes.actions.add_stop_point"), form, :stop_points ,
	  :"data-association-insertion-method" => "append",
	  :"data-association-insertion-node" => "div#stop_points"%>
  </div>

   <%= form.actions do %>
     <%= form.action :submit, :as => :button %>
     <%= form.action :cancel, :as => :link %>
   <% end %>
<% end %>
<script>
// Sorting the list

  $(document).ready(function(){
    $('.stop_points.content').on('cocoon:after-insert', function(e, insertedItem) {
        // ... do something
        console.log("insertedItem="+insertedItem);
        var total = $( "input.position" ).length;
        var input_position = insertedItem.find( "input.position" );
        $(input_position).attr( "value", total - 1);
        console.log( "position set = " + $(input_position).val());
    });

    $('#stop_points').sortable({
      axis: 'y',
      dropOnEmpty: false,
      handle: '.handle',
      cursor: 'crosshair',
      items: '.stop_points.nested-fields',
      opacity: 0.4,
      scroll: true,
      update: function(){
        $('.stop_points input.position').map(function(index,element){
//          var stop_point_id =$('#sortable_stop_points .stop_point')[index].id.replace("stop_point_","");
//          var before = $( element).attr("value");
//          $( element).attr("value",stop_point_id);
//          var after = $( element).attr("value");

//          change stop_point stop_area_id
// trouver le stop_area correspond à l'index
          var stopAreaInitialList = <%= @route.stop_points.map(&:stop_area_id).compact.to_json %>;

          // list added stop area ids
          var addedStopAreaIds = [];
          $('input.new_stop_point').each ( function(index,element) { addedStopAreaIds.push( parseInt( $(element).val())); });
          console.log(addedStopAreaIds);

          // list added stop area positions
          var addedStopAreaPositions = [];
          $('input.position.added').each ( function(index,element) {
            console.log( "parseInt( $( element ).val())="+parseInt( $( element ).val()) );
            console.log( " stopAreaInitialList.length="+ stopAreaInitialList.length );
              var position = parseInt( $( element ).val()) - stopAreaInitialList.length;
              addedStopAreaPositions.push( position);
          });
          console.log(addedStopAreaPositions);

          if (addedStopAreaIds.length != addedStopAreaPositions.length) {
            console.log( "Erreur, arrays should have same length: addedStopAreaIds.length="+insertedItem.length+", addedStopAreaPositions.length = "+ addedStopAreaPositions.length)
          }
          for ( var i=0; i<addedStopAreaIds.length; i++ ) {
            stopAreaInitialList.push(  addedStopAreaIds[ addedStopAreaPositions[ i ]]);
          }
          console.log(stopAreaInitialList);

          // si la position de l'élément a été modifiée
          // autrement dit le stop_area_id occupe la même position
          var stopPointPosition = parseInt( $( element ).attr("value"));
            console.log( "index = " + index + ", position = " + stopPointPosition +
                         ", stop_area_id old id = "+
                         $( '#route_stop_points_attributes_'+index+'_stop_area_id' ).attr("value") +
                         ", new id = " + stopAreaInitialList[ stopPointPosition]
            );
            // maj de la référence au stop area id
            $( '#route_stop_points_attributes_'+index+'_stop_area_id' ).attr( "value", stopAreaInitialList[ stopPointPosition]);

            // rectifier le stop_point associé à la suppression
            $($('.remove_fields.existing').prev("input[type=hidden]")[index]).attr("name","route[stop_points_attributes]["+index+"][_destroy]");

        });
      }
    });
  });
</script>

